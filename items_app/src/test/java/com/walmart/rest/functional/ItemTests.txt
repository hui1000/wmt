package com.walmart.rest.functional;

import com.walmart.rest.domain.RestItem;
import com.walmart.rest.domain.RestItemsInfo;
import com.walmart.rest.domain.RestItemsFixture;
import com.walmart.core.domain.Store;
import org.junit.Test;
import org.springframework.http.*;
import org.springframework.security.crypto.codec.Base64;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import com.walmart.config.CoreConfig;
import com.walmart.rest.domain.RestItem;
import com.walmart.core.repository.ItemsRepository;
import com.walmart.core.repository.StoresRepository;


import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

import static junit.framework.TestCase.*;
import static junit.framework.TestCase.assertTrue;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {CoreConfig.class})
@Transactional
@TransactionConfiguration(defaultRollback = false)
public class ItemTests {

    private String testUrl = "http://localhost:7340/services/items";

    @Autowired
    StoresRepository storesRepository;

    //@Test
    public void testAddStores() {
        // Pre-load the stores list. 
        for (int i = 2; i <10; i++) {
            Store store = new Store();
            store.setId(Long.valueOf(i));
            store.setName("Walmart Store " + i);
            storesRepository.save(store);

            Store savedStore = storesRepository.findById(Long.valueOf(i));
            assertNotNull(savedStore);
            assertEquals(savedStore.getName(), "Walmart Store " + i);
        }
    }

    @Test
    public void testAddOneItem() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));

        RestTemplate template = new RestTemplate();

        HttpEntity<String> requestEntity = new HttpEntity<String>(
                        RestItemsFixture.standardItemJSON(1),headers);

        ResponseEntity<RestItemsInfo> entity = template.postForEntity(
                testUrl, requestEntity, RestItemsInfo.class);

        System.out.println( " ****   code = " + entity.getStatusCode());
        //assertEquals(HttpStatus.CREATED, entity.getStatusCode());

        RestItemsInfo itemsInfo = entity.getBody();
        List<RestItem> items = itemsInfo.getItems();

        for (RestItem item: items) {
            System.out.println("The Item ID is " + item.getId());
            System.out.println("The Location is " + entity.getHeaders().getLocation()); 
        }
        
    }
}


